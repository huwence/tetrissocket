// Generated by CoffeeScript 1.7.1
(function() {
  var app, fs, handler, io, path, url;

  fs = require('fs');

  path = require('path');

  url = require('url');

  handler = function(request, response) {
    var contenttype, pathname;
    pathname = __dirname + url.parse(request.url).pathname;
    contenttype = '';
    if (path.extname(pathname) === '') {
      pathname += '/';
    }
    fs.exists(pathname, function(exists) {
      var ext;
      if (!exists) {
        response.writeHead(404);
      }
      ext = path.extname(pathname);
      return contenttype = (function() {
        switch (false) {
          case ext !== ".html":
            return {
              "Content-Type": "text/html"
            };
          case ext !== ".js":
            return {
              "Content-Type": "text/javascript"
            };
          case ext !== ".css":
            return {
              "Content-Type": "text/css"
            };
          case ext !== ".jpg":
            return {
              "Content-Type": "text/jpg"
            };
          case ext !== ".png":
            return {
              "Content-Type": "text/png"
            };
          default:
            return {
              "Content-Type": "application/octet-stream"
            };
        }
      })();
    });
    return fs.readFile(pathname, function(error, data) {
      if (error) {
        response.writeHead(500);
        return response.end('Error loading');
      }
      response.writeHead(contenttype);
      return response.end(data);
    });
  };

  app = require('http').createServer(handler);

  io = require('socket.io').listen(app);

  app.listen(8081);

  io.sockets.on('connection', function(socket) {
    var players;
    players = 0;
    socket.on('move', function(data) {
      return io.sockets.emit('do', data);
    });
    socket.on('enter', function(data) {
      var waiting;
      waiting = 1;
      console.log(data);
      console.log(players);
      if (players === 0 && data) {
        waiting = 0;
        io.sockets.emit('start', 1);
      }
      io.sockets.emit('waiting', waiting);
      return ++players;
    });
    return socket.on('disconnect', function() {
      return --players;
    });
  });

}).call(this);
